<apex:page showHeader="true" standardController="AIA_Benefit_Design__c" extensions="AIA_ZipDocumentsController" sidebar="false" >
    <head>
        <script type="text/javascript" src="/soap/ajax/26.0/connection.js"> </script>                
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>        
        <apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip-load.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip-deflate.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.jszip, '/jszip-inflate.js')}"/>
        
        <script type="text/javascript">
        var j$ = jQuery.noConflict();
        
        j$(document).ready(function() {
            //Hide upload button
            var uploadZipButton = j$('input[id$=uploadZipButton]');
            uploadZipButton.css('display', 'none');
            
            //Instantiate JSZip
            var zipFile = new JSZip();
            
            //Intercept click event
            j$('button[id=generateZipLink]').click(function() {                
                var checkedSize = j$("input[name='att_ids_group[]']:checked").size();
                var count = 0;                
                //Iterate over each selected file               
                j$("input[name='att_ids_group[]']:checked").each(function() {
                    //Refresh zip process status
                    j$('span[id$=zipStatus]').text('Getting file...');                    
                    //Get file using javascript remoting
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.AIA_ZipDocumentsController.getAttachment}',
                        j$(this).val(),
                        function(result, event){
                            if (event.status) {
                                //Refresh zip process status
                                j$('span[id$=zipStatus]').text('Compressing file "' + result.attName + '"...');                                
                                count++;                                
                                //Add the file
                                compressFile(zipFile, result.attName, result.attEncodedBody);                                
                                //Once all the selected files have been compressed
                                if (count == checkedSize) {
                                    //Refresh zip process status
                                    j$('span[id$=zipStatus]').text('Generating zip file...');
                                    
                                    //Send form
                                    sendZip(zipFile);
                                }
                            } else if (event.type === 'exception') {
                                alert('Exception: ' + event.message);
                            } else {
                                alert('Message: ' + event.message);
                            }
                        }, 
                        {escape: true}
                    );//End getAttachment                    
                });//end each selected attId
            });//end click
            
            //Compress one single file
            function compressFile(zipFile, name, data) {
                zipFile.file(name, data, {base64:true});
            }
            
            //Generate and upload zip file
            function sendZip(zipFile) {
                var data = zipFile.generate();
                
                var zipContent = j$('input[id$=zipContent]');
                zipContent.val(data);
                
                //Refresh zip process status
                j$('span[id$=zipStatus]').text('Uploading zip file...');
                
                var uploadZipButton = j$('input[id$=uploadZipButton]');
                uploadZipButton.trigger('click');
            }
        });
        </script>
    </head>
    
    <apex:form id="uploadZipForm" enctype="multipart/form-data"> 
        <apex:pageMessages />
        <apex:inputHidden id="zipContent" value="{!zipContent}" />        
        <apex:commandButton id="uploadZipButton" value="Upload" action="{!uploadZip}" reRender="thePageBlock" />        
        <apex:pageBlock title="Benefit Design Documents" id="thePageBlock">
            <apex:pageBlockButtons location="Top"> 
                <apex:commandButton action="{!cancelButton}" value="Return to Benefit Design" id="theCancelButton"/> 
            </apex:pageBlockButtons>
            <apex:pageMessage summary="Some files may not be visible since files with size less than 4.3MB can only be zipped" severity="info" strength="1" />
            <apex:pageblockTable value="{!BenDes1lst}" var="obj" >
                <apex:column headerValue="Select">
                    <input type="checkbox" name="att_ids_group[]" value="{!obj.Id}" />
                </apex:column>
                <apex:column value="{!obj.Document_Name__c}" headerValue="Name"/>
                <apex:column value="{!obj.Document_Type__c}" headerValue="Type"/> 
            </apex:pageblockTable>
        </apex:pageBlock>        
        <apex:outputLabel for="zipFileName" value="File name: " />
        <apex:inputText id="zipFileName" value="{!zipFileName}" />.zip        
        <p>
            <button type="button" id="generateZipLink">Zip Selected</button>
        </p>
        <p>
            <span>Status: </span>
            <span id="zipStatus" style="color:blue;"></span>
        </p>  
        <apex:inputField value="{!AIA_Benefit_Design__c.Name}" rendered="false"/>
    </apex:form>

</apex:page>